// ------------------------------------
// Grid
// ------------------------------------
//
// This grid uses inline-block to lay out content into separate columns.
// It consists of three SCSS parts.
//
// 1. Settings (Sass Map)
// 2. Mixins
// 3. Classes (if set in `$grid` settings map)






// ------------------------------------
// 1. Grid Settings
// ------------------------------------

$grid: (
  container: auto,
  columns: (8, 12),
  gutter: 24px,
  classes: (
    row: 'row',
    col: 'col',
    push: true,
    pull: true,
  ),
  breakpoints: (
    small,
    medium,
    large,
  ),
) !default;





// ------------------------------------
// 2. Mixins
// ------------------------------------

@mixin row {
  list-style: none;
  margin-left: -$gutter;
  letter-spacing: -1em;
}
@mixin row-reset {
  letter-spacing: normal;
  text-rendering: auto;
}
@mixin col {
  box-sizing: border-box;
  display: inline-block;
  vertical-align: top;
  position: relative;
  min-height: 1px;
  padding-left: $gutter;
}
@mixin span($width) {
  @if type-of($width) == 'number' {
    width: percentage($width / map-get($grid, columns));
  }
  @elseif type-of($width) == 'list' {
    width: percentage(nth($width, 1) / nth($width, 3));
  }
  @else {
    @warn "`#{width}` is not a number. Try `1/3` or `4/12`.";
  }
}





// ------------------------------------
// 3. Create Grid Classes
// ------------------------------------

@if map-has-key($grid, classes) {
  // Get `columns` map inside `$grid` map
  $colgroups: map-get($grid, columns);

  // Get size `gutter` from `$grid` map
  $gutter: map-get($grid, gutter);

  // Get class name of `row` from `$grid` map
  $row: map-deep-get(row);

  // Get class name of `col` from `$grid` map
  $col: map-deep-get(col);

  // Get `classes` map inside `$grid` map
  $classes: map-get($grid, classes);

  .#{$row} { @include row; }
  .#{$row} > * { @include row-reset; }
  [class*="#{$col}-"] { @include col; }

  @each $colgroup in $colgroups {
    @for $span from 1 through $colgroup {
      .#{$col}-#{$span}\/#{$colgroup} { width: percentage($span / $colgroup); }
      @if map-get($classes, push) == true {
        .push-#{$span}\/#{$colgroup} { left: percentage($span / $colgroup); }
      }
      @if map-get($classes, pull) == true {
        .pull-#{$span}\/#{$colgroup} { left: percentage(($span / $colgroup) * -1); }
      }
    }
    // Create classes for each breakpoint set in `$grid` map
    @if map-has-key($grid, breakpoints) {
      @each $label in map-get($grid, breakpoints) {
        @include breakpoint($label, $max:null) {
          @for $span from 1 through $colgroup {
            .#{$col}-#{$span}\/#{$colgroup}\@#{$label} { width: percentage($span / $colgroup); }
            @if map-get($classes, push) == true {
              .push-#{$span}\/#{$colgroup}\@#{$label} { left: percentage($span / $colgroup); }
            }
            @if map-get($classes, pull) == true {
              .pull-#{$span}\/#{$colgroup}\@#{$label} { left: percentage(($span / $colgroup) * -1); }
            }
          }
        }
      }
    }
  }
  .#{$row}--center {
    text-align: center;
     > * { text-align: left; }
  }
  .#{$row}--flush {
    margin-left: 0;
    > * { padding-left: 0; }
  }
  .#{$row}--reverse {
    direction: rtl;
    > * { direction: ltr; }
  }
  .#{$row}--fluid {
    display: flex;
    flex-wrap: wrap;
    > * { flex: 0 1 auto; }
    > .#{$col}-auto { flex: 1; }
  }

} // End test for classes in `$grid` map.












.box {
  margin-bottom: 15px;
  background-clip: content-box;
  background-color: lightblue;
  text-align: center;
  line-height: 30px;
  min-height: 30px;
}







.grid-overlay {
  padding-left: 2%;
  padding-right: 2%;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  pointer-events: none;

  * {
    height: 100%;
    margin-bottom: 0;
  }

  .row > [class*="col"] > div {
    outline: 1px solid rgba(255,0,0, 0.5);
    background-color: rgba(255,0,0, 0.05);
  }
}
